"use strict";
angular.module("uiAccordion", []), angular.module("uiAccordion").directive("ngAccordionHeading", function () {
    return {
        require: "^ngAccordionGroup", restrict: "EA", link: function (a, b, c, d) {
            d.setHeaderElement(b)
        }
    }
}), angular.module("uiAccordion").directive("ngAccordionBody", function () {
    return {
        require: "^ngAccordionGroup", restrict: "EA", link: function (a, b, c, d) {
            d.setBodyElement(b)
        }
    }
}), angular.module("uiAccordion").directive("ngAccordionGroup", function (a, b, c) {
    return {
        require: ["^ngAccordion", "ngAccordionGroup"],
        restrict: "EA",
        controller: "NgAccordionGroupCtrl",
        scope: {options: "="},
        link: function (d, e, f, g) {
            var h, i, j, k;
            i = g[1], h = g[0], j = h.accordion, k = a.createAccordionGrp(), d.options || (d.options = a.defaultAccordionGroupOptions()), k.options = angular.extend(a.defaultAccordionGroupOptions(), d.options), d.$watchCollection("options", function (b) {
                k.options = angular.extend(a.defaultAccordionGroupOptions(), b), b && !b.disabled && j.applyState(k)
            }, !0), b.all([i.getHeaderElement(), i.getBodyElement()]).then(function (a) {
                k.header = a[0], k.body = a[1], d.options.open ? k.$animate("show", "beforeOpen", "animateOpen") : k.$animate("hide", "beforeHide", "animateClose"), k.header.on("click", function () {
                    k.options.disabled || (k.options.open = !k.options.open, j.applyState(k)), c(function () {
                        d.$apply()
                    })
                }), j.addGroup(k)
            })
        }
    }
}), angular.module("uiAccordion").directive("ngAccordion", function (a) {
    return {
        restrict: "A", link: function (b, c, d, e) {
            var f = a.fetchFromObject(b, d.options);
            f && angular.extend(e.accordion.options, f), b.$watchCollection(d.options, function (a, b) {
                a && a !== b && angular.extend(e.accordion.options, a)
            })
        }, controller: "NgAccordionCtrl"
    }
}), angular.module("uiAccordion").controller("NgAccordionGroupCtrl", function (a) {
    var b, c;
    b = a.defer(), c = a.defer(), this.setHeaderElement = function (a) {
        b.resolve(a)
    }, this.getHeaderElement = function () {
        return b.promise
    }, this.setBodyElement = function (a) {
        c.resolve(a)
    }, this.getBodyElement = function () {
        return c.promise
    }
}), angular.module("uiAccordion").controller("NgAccordionCtrl", function (a) {
    this.accordion = a.createAccordion()
}), angular.module("uiAccordion").service("accordionGroup", function (a, b) {
    function c() {
    }

    function d() {
        var b = a.defer();
        return b.resolve(), b.promise
    }

    function e(a) {
        b.error(a)
    }

    return c.prototype.$animate = function (b, c, d) {
        var f = this;
        a.when(f.options[c]()).then(function () {
            f.options[d].call(f, b)
        }, e)
    }, {
        createAccordionGrp: function () {
            return new c
        }, defaultAccordionGroupOptions: function () {
            return {
                open: !1, disabled: !1, beforeOpen: d, beforeHide: d, animateOpen: function (a) {
                    this.body[a]("slow")
                }, animateClose: function (a) {
                    this.body[a]()
                }
            }
        }
    }
}), angular.module("uiAccordion").service("accordion", function () {
    function a() {
        this.groups = [], this.options = {closeOthers: !0}
    }

    return a.prototype.addGroup = function (a) {
        this.groups.push(a)
    }, a.prototype.getGroups = function () {
        return this.groups
    }, a.prototype.applyState = function (a) {
        a && (a.options.open ? (a.$animate("slideDown", "beforeOpen", "animateOpen"), this.closeOthers(a)) : a.$animate("slideUp", "beforeHide", "animateClose"))
    }, a.prototype.closeOthers = function (a) {
        if (this.options.closeOthers)for (var b = 0; b < this.groups.length; b++)a === this.groups[b] || (this.groups[b].options.open = !1, this.groups[b].$animate("slideUp", "beforeHide", "animateClose"))
    }, {
        createAccordion: function () {
            return new a
        }
    }
}), angular.module("uiAccordion").service("objectUtil", function () {
    this.fetchFromObject = function a(b, c) {
        if ("undefined" != typeof b && "undefined" != typeof c) {
            var d = c.indexOf(".");
            return d > -1 ? a(b[c.substring(0, d)], c.substr(d + 1)) : b[c]
        }
    }
});